<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo主题butterfly友情链接报错问题处理</title>
      <link href="/2020/02/02/hexo%E4%B8%BB%E9%A2%98butterfly%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2020/02/02/hexo%E4%B8%BB%E9%A2%98butterfly%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>​        今天在使用hexo主题butterfly添加友情链接的时候怎么添加也是会出现这种报错,</p><p><a href="C:%5CUsers%5Choajiabin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200202182126482.png" data-fancybox="group" data-caption="image-20200202182126482" class="fancybox"><img alt="image-20200202182126482" title="image-20200202182126482" data-src="C:%5CUsers%5Choajiabin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200202182126482.png" class="lazyload"></a></p><p>​        百度上都是说仔细检查空格,然而并没有什么用,经过一下午的研究,最终发现问题,确实是yml文件中空格的问题,但是这样太繁琐了,所以吧这个link.yml文件内容使用json的方式写出来也是可以正确使用的,下面粘贴出来可以用的json文件</p><p><code>{ class:</code> </p><p>   <code>{ class_name: &#39;友情链接&#39;,</code></p><p>​     <code>link_list: [</code></p><p>​       <code>{1,name: &#39;百度&#39;,link: &#39;https://baidu.com&#39;,avatar: &#39;https://www.baidu.com/img/pc_1c6e30772d5e4103103bd460913332f9.png&#39;,descr: &#39;百度一下,你就知道&#39;},</code></p><p>​       <code>{2,name: &#39;google&#39;,link: &#39;https://google.com&#39;,avatar: &#39;https://cdn.xxxxx.top/avatar.png&#39;,descr: &#39;谷歌搜索&#39;}</code></p><p>​       <code>]</code></p><p>​    <code>}</code></p><p><code>}</code></p><p>使用这段代码代替原本link.yml文件中的就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2020/02/01/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/01/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Hexo简介<br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>Hexo搭建步骤<br>安装Git<br>安装Node.js<br>安装Hexo<br>GitHub创建个人仓库<br>生成SSH添加到GitHub<br>将hexo部署到GitHub<br>设置个人域名<br>发布文章</p><ol><li>安装Git<br>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</li></ol><p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><p>sudo apt-get install git<br>安装好后，用git –version 来查看一下版本</p><ol start="2"><li>安装nodejs<br>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</li></ol><p>windows：nodejs选择LTS版本就行了。</p><p>linux：</p><p>sudo apt-get install nodejs<br>sudo apt-get install npm</p><p>安装完后，打开命令行</p><p>node -v<br>npm -v</p><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><ol start="3"><li>安装hexo<br>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</li></ol><p>输入命令</p><p>npm install -g hexo-cli<br>依旧用hexo -v查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><p>hexo init myblog<br>这个myblog可以自己取什么名字都行，然后</p><p>cd myblog //进入这个myblog文件夹<br>npm install<br>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**<br>hexo g<br>hexo server<br>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：</p><p>使用ctrl+c可以把服务关掉。</p><ol start="4"><li>GitHub创建个人仓库<br>首先，你先要有一个GitHub账户，去注册一个吧。</li></ol><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>点击create repository。</p><ol start="5"><li>生成SSH添加到GitHub<br>回到你的git bash中，</li></ol><p>git config –global user.name “yourname”<br>git config –global user.email “youremail”<br>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><p>git config user.name<br>git config user.email<br>然后创建SSH,一路回车</p><p>ssh-keygen -t rsa -C “youremail”<br>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功</p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a><br>6. 将hexo部署到GitHub<br>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/YourgithubName/YourgithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master<br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><p>npm install hexo-deployer-git –save<br>然后</p><p>hexo clean<br>hexo generate<br>hexo deploy<br>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><ol start="7"><li>设置个人域名<br>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</li></ol><p>注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br>注意，解析线路选择默认，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！</p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名fangzh.top</p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>最后，在gitbash中，输入</p><p>hexo clean<br>hexo g<br>hexo d</p><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><p>hexo new newpapername</p><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><p>hexo clean<br>hexo g<br>hexo d</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo新建文章报错</title>
      <link href="/2020/02/01/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/"/>
      <url>/2020/02/01/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>​    使用hexo新增文章的时候添加标签,hexo g的时候发现有报错YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</p><p>原因是创建的md文件头部声明中没有加空格。</p><p><a href="https://img2018.cnblogs.com/blog/1338341/201810/1338341-20181028105811114-138351569.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img2018.cnblogs.com/blog/1338341/201810/1338341-20181028105811114-138351569.png" class="lazyload"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除有道云笔记广告</title>
      <link href="/2020/02/01/%E5%8E%BB%E9%99%A4%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E5%B9%BF%E5%91%8A/"/>
      <url>/2020/02/01/%E5%8E%BB%E9%99%A4%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>一、适用于6.0之前版本</strong></p><p>你只需要：找到有道云笔记的安装路径，*\Youdao\YoudaoNote\theme\build.xml</p><p>用笔记本打开这个文件，找到‘左下角广告’这几个字，把下面的代码删掉：</p><p>&lt;PanelAdtype=”adpanel” css=”public” ass=”mainform panelclient PanelAd”&gt;         type=”panel” css=”AdPanel”Dockstyle=”top”Bounds=”0,0,0,1”/&gt;         &lt;AdPhototype=”photo” css=”Ad AdPhoto” ass=”common fill”/&gt;         &lt;AdTexttype=”label” css=”AdText”AnchorStyle=”topleft”Bounds=”20,135,25,10”Margin=”0,0,0,0”/&gt;PanelAd&gt;</p><p>之后保存，重启有道云笔记，就可以了。</p><p><strong>二、6.0及以后版本</strong></p><p>找到有道云笔记的安装路径，*\Youdao\YoudaoNote\theme\build.xml</p><p>用笔记本打开这个文件，找到PanelAd标签,大概在366行</p><p>&lt;PanelAdtype=”adpanel” css=”public” ass=”mainform PanelAd”&gt;    type=”panel” css=”AdPanel”Dockstyle=”top”Bounds=”0,0,0,1”/&gt;    &lt;MiddlePhotoPaneltype=”panel” css=”public”DockStyle=”top”Bounds=”0,0,250,160”Margin=”0,13,0,13”&gt;        &lt;AdPhototype=”photo” css=”Ad AdPhoto”AnchorStyle=”center”AutoZoom=”ZoomEqual”Bounds=”0,0,200,130”&gt;            &lt;AdClosetype=”button” css=”adclear”AnchorStyle=”topright”Bounds=”-1,1,24,24” /&gt;            &lt;AdTexttype=”label” css=”AdText”AnchorStyle=”bottomleft”Bounds=”6,-6,25,10”/&gt;        AdPhoto&gt;    MiddlePhotoPanel&gt;PanelAd&gt;</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/459997c04ca54154a2cc5391b85e1b4a/clipboard.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/459997c04ca54154a2cc5391b85e1b4a/clipboard.png" class="lazyload"></a></p><p>删除ass属性里面的panelclient这个值，我上面的截图是删除之后的。</p><p>然后找到AdWraperMid这个标签，大概在466行，修改bounds属性值为0，0，0，0。</p><p>&lt;AdWraperMidtype=”panel”css=”public”dockstyle=”bottom”visible=”false”bounds=”0,0,0,0”&gt;&lt;PanelAdMidtype=”control”control=”PanelAd”&gt;PanelAdMid&gt;&lt;LeftShadowtype=”control”control=”MidPanelLeftShadow”/&gt;AdWraperMid&gt;</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/f317671725e044fd9e949b24c0e35c0f/clipboard.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/f317671725e044fd9e949b24c0e35c0f/clipboard.png" class="lazyload"></a></p><p>之后保存，重启有道云笔记，就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat标准日志分割</title>
      <link href="/2020/02/01/tomcat%E6%A0%87%E5%87%86%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/"/>
      <url>/2020/02/01/tomcat%E6%A0%87%E5%87%86%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<ol><li>下载日志分割程序：</li></ol><p>wget  <a href="https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz" target="_blank" rel="noopener">https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz</a></p><p>md5(a44564fd5a5b061a5691b9a837d04979)</p><p>\2. 安装分割程序：</p><p>./configure</p><p>make</p><p>sudo make install</p><p>which cronolog</p><p>\2. 修改tomcat启动脚本vim catalina.sh（大概在catalina文件中的第429行和第439行左右）</p><p>1) org.apache.catalina.startup.Bootstrap “$@” start \</p><p>​    &gt;&gt; “$CATALINA_OUT” 2&gt;&amp;1 “&amp;”</p><p>修改为：</p><p>   org.apache.catalina.startup.Bootstrap “$@” start \</p><p>   2&gt;&amp;1 |/usr/local/sbin/cronolog “$CATALINA_BASE/logs/catalina-%Y-%m-%d.out” &amp;</p><p>2) org.apache.catalina.startup.Bootstrap “$@” start \</p><p>   &gt;&gt; “$CATALINA_OUT” 2&gt;&amp;1 “&amp;”</p><p>修改为：</p><p>org.apache.catalina.startup.Bootstrap “$@” start \</p><p> 2&gt;&amp;1 |/usr/local/sbin/cronolog “$CATALINA_BASE/logs/catalina-%Y-%m-%d.out” &amp;</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件</title>
      <link href="/2020/02/01/vscode%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/02/01/vscode%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3155cc3657894546972e73a819df7068/clipboard.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3155cc3657894546972e73a819df7068/clipboard.png" class="lazyload"></a></p><p>VScode现在已经越来越完善。性能远超Atom和webstorm,你有什么理由不用它?</p><p>在这里，我会给你们推荐很多实用的插件，让你对 vscode 有更深刻的体会，渐渐地你就会知道它有多好用。</p><p>走马观花前，请先将你的 vscode 更新到最新版本。</p><p><strong>通用插件</strong></p><p><strong>HTML Snippets</strong></p><p>超级实用且初级的 H5代码片段以及提示</p><p><strong>HTML CSS Support</strong></p><p>让 html 标签上写class 智能提示当前项目所支持的样式</p><p>新版已经支持scss文件检索</p><p><strong>Debugger for Chrome</strong></p><p>让 vscode 映射 chrome 的 debug功能，静态页面都可以用 vscode 来打断点调试，真666~ </p><p>配置稍微复杂一些，哪天心情好我再另写教程吧~</p><p><strong>jQuery Code Snippets</strong></p><p>jquery 重度患者必须品，废话不多说，上图</p><p><strong>vscode-icon</strong></p><p>让 vscode 资源树目录加上图标，必备良品！</p><p><strong>Path Intellisense</strong></p><p>自动路劲补全，默认不带这个功能的，赶紧装</p><p><strong>Npm Intellisense</strong></p><p>require 时的包提示（最新版的vscode已经集成此功能）</p><p><strong>Document this</strong></p><p>js 的注释模板 （注意：最新版的vscode已经原生支持）</p><p><strong>ESlint</strong></p><p>ESlint 接管原生 js 提示，可以自定制提示规则。这个比较高玩，不会的就算了，我之前发过一篇文章 sublime 配置 <a href="https://segmentfault.com/a/1190000004818718" target="_blank" rel="noopener">Atom js 语法校验</a>中有提到，他们的配置文件是通用的。</p><p><strong>HTMLHint</strong></p><p>html代码检测</p><p><strong>Project Manager</strong></p><p>在多个项目之前快速切换的工具</p><p><strong>beautify</strong></p><p>格式化代码的工具</p><p><strong>Bootstrap 3 Sinnpet</strong></p><p>常用 bootstrap 的可以下</p><p><strong>Atuo Rename Tag</strong></p><p>修改 html 标签，自动帮你完成尾部闭合标签的同步修改，不过有些bug。</p><p><strong>GitLens</strong></p><p>丰富的git日志插件</p><p><strong>fileheader</strong></p><p>顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间</p><p><strong>filesize</strong></p><p>在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</p><p><strong>Bracket Pair Colorizer</strong></p><p>让括号拥有独立的颜色，易于区分。可以配合任意主题使用。</p><p><strong>Quokka</strong></p><p><strong>使用</strong>：先shift+cmd+p （ctrl+shift+p）输入 quokka 选择 new javascript 就行了</p><p>Quokka 是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。它易于配置，并能够预览变量的函数和计算值结果。另外，在使用 JSX 或 TypeScript 项目中，它能够开箱即用。</p><p>/<em>?</em>/在某个表达式之后（或//?在语句之后）插入特殊注释将仅记录该表达式的值。</p><p>例如，</p><p>a.b()/<em>?</em>/.c().d()</p><p>将输出a.b()表达式的结果，和</p><p>a.b().c().d() /<em>?</em>/// or justa.b().c().d() //?</p><p>将输出完整a.b().c().d()表达式的结果。</p><p>/<em>?.</em>/ 在任何表达式之后插入特殊注释将报告执行表达式所花费的时间。</p><p>a() //?. $    显示a()执行时间和结果。</p><p>插件地址：<a href="https://quokkajs.com/" target="_blank" rel="noopener">https://quokkajs.com/</a></p><p><strong>CSS Peek</strong></p><p>使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek</a></p><p><strong>HTML Boilerplate</strong></p><p>通过使用 HTML 模版插件，你就摆脱了为 HTML 新文件重新编写头部和正文标签的苦恼。你只需在空文件中输入 html，并按 Tab 键，即可生成干净的文档结构。</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=sidthesloth.html5-boilerplate" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=sidthesloth.html5-boilerplate</a></p><p><strong>Prettier</strong></p><p>Prettier 是目前 Web 开发中最受欢迎的代码格式化程序。安装了这个插件，它就能够自动应用 Prettier，并将整个 JS 和 CSS 文档快速格式化为统一的代码样式。如果你还想使用 ESLint，那么还有个 Prettier – Eslint 插件，你可不要错过咯！</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></p><p><strong>Color Info</strong></p><p>这个便捷的插件，将为你提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了。</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=bierner.color-info" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=bierner.color-info</a></p><p><strong>Icon Fonts</strong></p><p>这是一个能够在项目中添加图标字体的插件。该插件支持超过 20 个热门的图标集，包括了 Font Awesome、Ionicons、Glyphicons 和 Material Design Icons。</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=idleberg.icon-fonts" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=idleberg.icon-fonts</a></p><p><strong>Minify</strong></p><p>这是一款用于压缩合并 JavaScript 和 CSS 文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为.min文件的选项。它能够分别通过 uglify-js、clean-css 和 html-minifier，与 JavaScript、CSS 和 HTML 协同工作。</p><p>使用<strong>F1</strong>运行文件缩小器Minify</p><p>插件地址：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.minify" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=HookyQR.minify</a></p><p><strong>Vue插件</strong></p><p>以下推荐vue框架所需的插件</p><p><strong>vetur</strong></p><p>语法高亮、智能感知、Emmet等</p><p><strong>VueHelper</strong></p><p>snippet代码片段</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat8生成文件权限不足的问题</title>
      <link href="/2020/02/01/tomcat8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8D%E8%B6%B3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/01/tomcat8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8D%E8%B6%B3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>之前在tomcat 7下文件上传后访问一直没问题，现在tomcat版本升到8.5，在测试文件http上传时，发现所传文件无法通过nginx访问了。（Tomcat具体版本为8.5.11）</p><p>PS：tomcat通过root用户来启动。</p><p>在确定了nginx自身的没有配置问题之后，上linux服务器查看所传文件，发现其上传目录下代码自动创建的目录权限是750，所上传文件权限是640。也就是说默认赋予的文件权限中其他用户的权限始终为0所导致。</p><p>默认权限与umask有关，因此怀疑是系统默认导致，但在查看系统默认配置（/etc/profile）后，发现默认配置没问题。</p><p>umask 002 对应文件权限664，文件夹权限775；umask 022对应文件权限644，文件夹权限755。可见都有读取访问权限的。在默认情况下，tomcat所建目录及文件应该用到的是umask 022，但为何实际情况并非如此呢？</p><p>（按照结果看tomcat 8.5下上传文件的默认权限为umask 027）</p><p>问题到这里，排除下来可能的原因并不多了，因为之前在其他机器上使用tomcat 7的时候是上传后访问没问题的，所以又拿tomcat 7在这台服务器上测试了一下，以判断是不是tomcat 8.5自身的问题。结果发现，在同台服务器上tomcat 7上传后访问没问题。最终定位为题是在tomcat 8.5上。</p><p>接下来，抱着试一试的心态，在tomcat 8.5的catalina.sh中搜索 umask关键字（因为我始终有个直觉这和默认权限设置有关，结果证实这次的判断是准确的），很庆幸，原因立马就定位到了。</p><p>UMASK=”0027”出现了！在按照目前的功能需求，将其改为UMASK=”0022”并重启tomcat 8.5后，文件上传后访问恢复正常。</p><p>至此，问题解决。期间，不是没想过通过百度或google解决问题，但是因为tomcat 8.5版本比较新，相关问题的中文文档就没有搜到。英文文档也是在定位了tomcat 8.5问题后搜索关键词tomcat8.5 umask后在tomcat官网文档及相关英文论坛里发现了踪迹。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置Mysql主从</title>
      <link href="/2020/02/01/Linux%E9%85%8D%E7%BD%AEMysql%E4%B8%BB%E4%BB%8E/"/>
      <url>/2020/02/01/Linux%E9%85%8D%E7%BD%AEMysql%E4%B8%BB%E4%BB%8E/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>主从配置其实蛮简单的，主从配置也叫热备，热备就是在数据库启动的情况下实时对数据进行备份，相反对概念叫冷备，就是在数据库停止对时候对数据进行备份。</p><p>我们使用数据库对主从配置主要是解决数据库对读写压力，一般的，写操作主库，读操作从库。远离就是从库读取主库对binlog日志实现诗句同步，同步是有延迟对，一般指的是两台机器的网络延迟，减少延迟的办法是尽量使用带宽较大的服务器做从库。</p><p><strong>正文</strong></p><p>废话不多说了，大家过来是看如何配置主从的，不是来学概念和原理的。</p><p><strong>前提准备</strong></p><p>我们要在两台网络互通的服务器安装两个mysql ，并启动成功，请查看我上篇文章：</p><p><a href="https://blog.csdn.net/weixin_38003389/article/details/90696337" target="_blank" rel="noopener">Linux安装mysql5.7.26 –（傻瓜版3分钟搞定）</a></p><p>公众号请点击：<a href="https://blog.csdn.net/weixin_38003389" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38003389</a></p><p>完成安装，请继续……</p><p>   介绍一下我本次操作的两台服务器，这都是我们公司虚出来的机器，操作前最好有 root权限，后期可能改一下防火墙的东西。</p><table><thead><tr><th>主</th><th>10.8.18.73</th></tr></thead><tbody><tr><td>从</td><td>10.8.18.74</td></tr></tbody></table><p><strong>主库操作</strong></p><p>一、配置文件</p><p> 使用命令对主库进行配置</p><p>vim /etc/my.cnf</p><p>添加如下配置</p><ol><li><p>server-id=1 #服务器id (主从必须不一样)，爱写啥写啥，别太离谱就行</p></li><li><p>log-bin=mysql-bin  #打开日志(主机需要打开)，这个mysql-bin也可以自定义，这里也可以加上路径</p></li><li><p>#作为主机的配置</p></li><li><p>binlog-do-db=master  #要给从机同步的库</p></li><li><p>binlog-ignore-db=mysql  #不给从机同步的库(多个写多行)</p></li><li><p>binlog-ignore-db=information_schema</p></li><li><p>binlog-ignore-db=performance_schema</p></li><li><p>binlog-ignore-db=sys</p></li><li><p>expire_logs_days=7  #自动清理 7 天前的log文件,可根据需要修改</p><p>按esc 按：wq 回车 保存并退出</p></li></ol><p>然后 到mysql bin目录下执行重启mysql</p><ol><li>cd /usr/local/mysql/bin</li><li>service mysqld restart </li></ol><p><strong>测试log_bin是否成功开启</strong></p><p>登录mysql 执行</p><p>show variables like ‘%log_bin%’;</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/292948d937f844ee946d6a516d836345/0aa15ff696984f83956939442e0eb198.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/292948d937f844ee946d6a516d836345/0aa15ff696984f83956939442e0eb198.png" class="lazyload"></a></p><p>然后创建master的数据库中建立备份账号：backup为用户名，%表示任何远程地址，如下表示密码为1234的任何远程地址的backup都可以连接master主机</p><p>grant replication slave on <em>.</em> to ‘backup’@’%’ identified by ‘123456’;</p><p> 如果碰到ERROR 1290 (HY000): The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement ，请点击博客解决：<a href="https://www.cnblogs.com/debmzhang/p/5013540.html" target="_blank" rel="noopener">https://www.cnblogs.com/debmzhang/p/5013540.html</a></p><p>成功后查看账号是否存在</p><ol><li>use mysql</li><li>select user,authentication_string,host from user;</li></ol><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/b3906fce4e9948868559c1b35424995c/996052b054c24d57b18b1d737afc0ecd.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/b3906fce4e9948868559c1b35424995c/996052b054c24d57b18b1d737afc0ecd.png" class="lazyload"></a></p><p><strong>查看主服务器上当前的二进制日志名和偏移量值这里的file 和position</strong> </p><p>show master status\G #</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3f439abf49354b7ab6bde56233a8822a/599541acde704c079434e6c3d60ab970.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3f439abf49354b7ab6bde56233a8822a/599541acde704c079434e6c3d60ab970.png" class="lazyload"></a></p><p>这个图你要有记录，一会设置从库的时候需要里面的参数。</p><p>我们在主库中创建数据库和一张表</p><ol><li>CREATEDATABASEmaster;</li><li>usemaster</li><li>CREATETABLE<code>order_0</code> (</li><li><code>order_id</code>int(11) NOTNULL,</li><li><code>user_id</code>int(11) NOTNULL,</li><li>​       PRIMARY KEY (<code>order_id</code>)</li><li>​     ) ENGINE=InnoDBDEFAULTCHARSET=latin1;</li></ol><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/5afcf7a62791484d9f5dbff27399d0d9/43551685edda4186b3d4aeebdd6d3dcd.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/5afcf7a62791484d9f5dbff27399d0d9/43551685edda4186b3d4aeebdd6d3dcd.png" class="lazyload"></a></p><p><strong>从库操作</strong></p><p>登录从库，同样打开 配置文件</p><ol><li>vim /etc/my.cnf </li><li>#添加下面几行</li><li>server_id=2</li><li>master_info_repository=TABLE</li><li>relay_log_info_repository=TABLE</li></ol><p>保存并退出</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/827a9eea2d1a4741a6305d1d59dab9b0/009c67428d6e4896b1dc383f64e76581.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/827a9eea2d1a4741a6305d1d59dab9b0/009c67428d6e4896b1dc383f64e76581.png" class="lazyload"></a></p><p>登录从库的mysql 然后执行，下面的参数自己去找主库我刚刚然你记录下来的数值填写。</p><ol><li>mysql&gt; stop slave;</li><li>Query OK, 0 rows affected, 1 warning (0.00 sec)</li><li>mysql&gt; change master to</li><li>​    -&gt; master_host=’10.8.18.73’,</li><li>​    -&gt;  master_user=’backup’,</li><li>​    -&gt; master_password=’123456’,</li><li>​    -&gt;  master_log_file=’mysql-bin.000001’,</li><li>​    -&gt; master_log_pos=610;</li><li>Query OK, 0 rows affected, 2 warnings (0.03 sec)</li><li>mysql&gt; start slave;</li><li>Query OK, 0rows affected(0.00 sec)</li></ol><p>查看slave从机的状态</p><ol><li>mysql&gt;  show slave status \G</li><li><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></li><li>​               Slave_IO_State: Connecting to master</li><li>​                  Master_Host: 10.8.18.73</li><li>​                  Master_User: backup</li><li>​                  Master_Port: 3306</li><li>​                Connect_Retry: 60</li><li>​              Master_Log_File: mysql-bin.000001</li><li>​          Read_Master_Log_Pos: 610</li><li>​               Relay_Log_File: BJ-FT-VM-136-48-relay-bin.000001</li><li>​                Relay_Log_Pos: 4</li><li>​        Relay_Master_Log_File: mysql-bin.000001</li><li>​             Slave_IO_Running: Connecting</li><li>​            Slave_SQL_Running: Yes</li><li>​              Replicate_Do_DB: </li><li>​          Replicate_Ignore_DB: </li></ol><p>Slave_IO_Running: Connecting 显示的是连接中，说明没有连上主库，可能是主库 3306没有开放，也可能是防火墙或网络等问题。</p><p>当然我通过关闭防火墙解决的。</p><p>然后在查看从库状态，看到连个 Yes 就说明成功了。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/bf4fca1b5372428e93d0e9abdc5d82b0/0985acafd93b4717b6ae5b5239dc7511.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/bf4fca1b5372428e93d0e9abdc5d82b0/0985acafd93b4717b6ae5b5239dc7511.png" class="lazyload"></a></p><p>然后 把在从库执行的建表和建库语句在从库再来一遍。</p><p>测试一下吧</p><p>在主库插入一条数据，然后在从库读出来</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/c5f961147dc14ea5bfee45ffd1fd5853/242adee451604b05951b64962ec0cec9.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/c5f961147dc14ea5bfee45ffd1fd5853/242adee451604b05951b64962ec0cec9.png" class="lazyload"></a></p><p><strong>以上实验证明主从同步成功！！！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL同步故障部分解决办法</title>
      <link href="/2020/02/01/MySQL%E5%90%8C%E6%AD%A5%E6%95%85%E9%9A%9C%E9%83%A8%E5%88%86%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/02/01/MySQL%E5%90%8C%E6%AD%A5%E6%95%85%E9%9A%9C%E9%83%A8%E5%88%86%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>进入slave服务器，运行：<br>mysql&gt; show slave status\G<br>         …….<br>             Relay_Log_File: localhost-relay-bin.000535<br>              Relay_Log_Pos: 21795072<br>      Relay_Master_Log_File: localhost-bin.000094<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: No<br>            Replicate_Do_DB:<br>        Replicate_Ignore_DB:<br>      ……<br>解决办法一、<br>Slave_SQL_Running: No<br>1.程序可能在slave上进行了写操作<br>2.也可能是slave机器重起后，事务回滚造成的.</p><p>一般是事务回滚造成的：<br>解决办法：<br>mysql&gt; stop slave ;<br>mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;<br>mysql&gt; start slave ;<br>解决办法二、<br>首先停掉Slave服务：slave stop<br>到主服务器上查看主机状态：<br>记录File和Position对应的值<br>进入master<br>mysql&gt; show master status;<br>+———————-+———-+————–+——————+<br>| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br>+———————-+———-+————–+——————+<br>| localhost-bin.000094 | 33622483 |              |                  |<br>+———————-+———-+————–+——————+<br>1 row in set (0.00 sec)<br>然后到slave服务器上执行手动同步：</p><p>mysql&gt; change master to </p><blockquote><p>master_host=’master_ip’,<br>master_user=’user’,<br>master_password=’pwd’,<br>master_port=3306,<br>master_log_file=localhost-bin.000094’,<br>master_log_pos=33622483 ;<br>1 row in set (0.00 sec)<br>mysql&gt; start slave ;<br>1 row in set (0.00 sec)<br>mysql&gt; show slave status\G<br><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong><br>……..<br>       Master_Log_File: localhost-bin.000094<br>   Read_Master_Log_Pos: 33768775<br>        Relay_Log_File: localhost-relay-bin.000537<br>         Relay_Log_Pos: 1094034<br> Relay_Master_Log_File: localhost-bin.000094<br> Slave_IO_Running: Yes<br>     Slave_SQL_Running: Yes<br>       Replicate_Do_DB:<br>手动同步需要停止master的写操作！ </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux关闭防火墙命令</title>
      <link href="/2020/02/01/Linux%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/01/Linux%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>1:查看防火状态</strong></p><p><code>systemctl status firewalld</code></p><p><code>service  iptables status</code></p><p><strong>2:暂时关闭防火墙</strong></p><p><code>systemctl stop firewalld</code></p><p><code>service  iptables stop</code></p><p><strong>3:永久关闭防火墙</strong></p><p><code>systemctl disable firewalld</code></p><p><code>chkconfig iptables off</code></p><p><strong>4:重启防火墙</strong></p><p><code>systemctl enable firewalld</code></p><p><code>service iptables restart</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需密码通过ssh执行rsync来同步文件的方法</title>
      <link href="/2020/02/01/%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81%E9%80%9A%E8%BF%87ssh%E6%89%A7%E8%A1%8Crsync%E6%9D%A5%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/01/%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81%E9%80%9A%E8%BF%87ssh%E6%89%A7%E8%A1%8Crsync%E6%9D%A5%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>1.通过ssh执行rsync(需要密码)</strong></p><p>通过ssh帐户(需要密码)执行rsync，将文件同步镜像到远程服务器。</p><p>下面这个例子将本地的/home/ramesh同步到远程目录/backup/ramesh(服务器地址192.168.200.10)。</p><p>执行以下操作时，服务器将会提示需要用户使用密码登录。</p><p>复制代码 代码如下:</p><p><code>rsync -avz -e ssh /home/ramesh/ ramesh@192.168.200.10:/backup/ramesh/</code></p><p><strong>2.使用ssh-keygen生成密匙</strong></p><p>现在我们来设置ssh,以便在执行ssh操作时不需要密码，使用ssh-keygen在本地生成公钥和私钥。</p><p>复制代码 代码如下:</p><p><code>$ ssh-keygen</code></p><p><code>Enter passphrase (empty for no passphrase):</code></p><p><code>Enter same passphrase again:</code></p><p>提示：当提示输入密码时，只需输入两次回车键，不指配密码字符。</p><p><strong>3.使用ssh-copy-id将公匙拷贝至远程主机</strong></p><p>执行ssh-copy-id,将通过ssh-keygen生成的公匙拷贝至远程主机。</p><p>复制代码 代码如下:</p><p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.200.10</code></p><p>提示：执行以上操作时，将会提示输入远程主机帐户和密码，然后就会自动将公匙拷贝至远程目录。</p><p><strong>4.无需密码通过ssh来执行rsync</strong></p><p>现在，你可以不需要密码就可以ssh连接到远程主机</p><p>复制代码 代码如下:</p><p><code>ssh 192.168.200.10</code></p><p>重新来执行rsync，现在应该就不会提示输入密码了</p><p>复制代码 代码如下:</p><p><code>rsync -avz -e ssh /home/ramesh/ ramesh@192.168.200.10:/backup/ramesh/</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵远程控制客户端无法安装的问题</title>
      <link href="/2020/02/01/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/01/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>向日葵远程控制可以帮助我们用手机或电脑控制其他电脑，可以帮助我们完成许多事情，非常方便，但是有人反映卸载客户端后无法重新安装，双击安装包没反应，我也遇到了同样的问题，在网上也没搜索到解决方案，最后自己解决了，下面分享给大家解决办法</p><p>工具/原料</p><ul><li>计算机一台</li><li>向日葵远程控制安装文件</li></ul><p>方法/步骤</p><ol><li>1</li></ol><p>最近有小伙伴反映说卸载向日葵远程控制客户端后无法再次安装，这是因为向日葵的控制服务 sunlogin Service 没有卸载干净，用cmd删除此服务即可，下面我来示范步骤。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/4d47b412a66447ee8b0802afac5dfd0e/9467ac52c7b34b1a8399f7681c6ef3b1.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/4d47b412a66447ee8b0802afac5dfd0e/9467ac52c7b34b1a8399f7681c6ef3b1.png" class="lazyload"></a></p><ol><li>2</li></ol><p>首先打开任务管理器 Shift+Ctrl+Esc</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3f7640417a7a4963b31b96cba95db5fe/20205e9a937145e987f7daec446b313d.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/3f7640417a7a4963b31b96cba95db5fe/20205e9a937145e987f7daec446b313d.png" class="lazyload"></a></p><ol><li>3</li></ol><p>点击任务管理器上栏的“服务”一项，再点击底下的，“打开服务”。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/2789ab73890d47ada96b73e12ee2c0fc/ca6a132b6ce7493898f0737ddbba038a.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/2789ab73890d47ada96b73e12ee2c0fc/ca6a132b6ce7493898f0737ddbba038a.png" class="lazyload"></a></p><ol><li>4</li></ol><p>之后进入这个界面，在这个界面里找到SunloginService。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/47e1dc03281347629ee2e819a243d042/01d1ac6e89ef4429af643ed7e8548e7a.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/47e1dc03281347629ee2e819a243d042/01d1ac6e89ef4429af643ed7e8548e7a.png" class="lazyload"></a></p><ol><li>5</li></ol><p>把SunloginService名称复制。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/9ef88d59563e4b93a7fb78fad7cbd80b/12bfb337d0ae41898dd10308dd84035f.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/9ef88d59563e4b93a7fb78fad7cbd80b/12bfb337d0ae41898dd10308dd84035f.png" class="lazyload"></a></p><ol><li>6</li></ol><p>接下来按 win+r 打开运行 输入cmd进入带管理员权限的命令提示符。</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/c8dad4f26cbd4da8a1f2d4d778796798/973d2205e57b4d1badf09c7b598b6e6b.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/c8dad4f26cbd4da8a1f2d4d778796798/973d2205e57b4d1badf09c7b598b6e6b.png" class="lazyload"></a></p><ol><li>7</li></ol><p>然后再cmd下输入 sc delete 服务名称来卸载SunloginService这项服务</p><p>输入完成之后回车即可</p><p><a href="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/00491e11dcbf48109e37de2943f8ba6d/4a91129847a24013bbae6119f03d8e50.png" data-fancybox="group" data-caption="向日葵远程控制客户端无法安装的问题" class="fancybox"><img alt="向日葵远程控制客户端无法安装的问题" title="向日葵远程控制客户端无法安装的问题" data-src="E:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qqCE0F8898CFEBED713A23BC3701CFD74F%281%29/00491e11dcbf48109e37de2943f8ba6d/4a91129847a24013bbae6119f03d8e50.png" class="lazyload"></a></p><ol><li>8</li></ol><p>卸载完后再次打开向日葵远程控制安装文件就可以正常打开了。</p><p>END</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rsync添加进程锁，防止重复进程</title>
      <link href="/2020/02/01/Rsync%E6%B7%BB%E5%8A%A0%E8%BF%9B%E7%A8%8B%E9%94%81%EF%BC%8C%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/02/01/Rsync%E6%B7%BB%E5%8A%A0%E8%BF%9B%E7%A8%8B%E9%94%81%EF%BC%8C%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在很多人用crontab执行rsync脚本同步时会出现一个进程没有跑完，就会起另外一个进程，等于是脚本重复在跑，这样会造成服务器的负载过高，导致服务器上的一些服务异常</p><p>为了避免这类异常的发生我们仅需要在rsync的脚本里加一个进程锁，脚本在执行rsync同步之前会检测进程锁是否存在，如果存在则不再执行同一个rsync同步命令。</p><p>未加进程锁的脚本：</p><p>[root@localhost opt]# cat lra.sh #!/bin/shrsync -avzP –bwlimit 3000 /home/lra <a href="mailto:abc@172.16.0.123">abc@172.16.0.123</a>::abc –password-file=/etc/rsync.pas</p><p>复制代码</p><p>Crontab 里的计划任务</p><p>2 * * * * /opt/lra.sh &gt; /dev/null</p><p>复制代码</p><p>以上说明每两分钟执行一次lra.sh脚本，如果lra.sh的同步未在2分钟之内完成，crontab接下来的还会执行此脚本，这样就会产生相同的rsync的进程。</p><p>按照这种状态，长时间就会产生上百甚至上千个rsync进程，就会导致服务器的负载过高，甚至一些服务也会出现异常！</p><p>添加进程锁的脚本：</p><p>[root@localhost opt]# cat lra.sh #!/bin/sh flock -xn /var/run/rsync.lock -c  ‘rsync -avzP –bwlimit 3000 /home/lra <a href="mailto:abc@172.16.0.123">abc@172.16.0.123</a>::abc –password-file=/etc/rsync.pas’</p><p>flock -xn /var/run/rsync.lock -c ‘rsync -r <a href="mailto:root@192.168.208.12">root@192.168.208.12</a>:/data/tomcat8 /data/backup/jcms’</p><p>复制代码</p><p>Crontab 里的计划任务</p><p>2 * * * * /opt/lra.sh &gt; /dev/null</p><p>复制代码</p><p>执行rsync同步命令前添加rsync的进程锁，会在 /var/run/目录下产生一个rsync.lock的锁文件，crontab执行lra.sh脚本，rsync会检测rsync.lock的锁文件是否存在，如果存在说明之前的同步还未完成，则不执行本次的rsync同步，直到上次rsync同步完成后，crontab里的脚本才会执行rsync同步。</p><p>很简单有木有？以前都是在php或者python中模拟加进程锁，没有这种方式简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray搭建</title>
      <link href="/2020/02/01/v2ray%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/01/v2ray%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>系统：centos7.x，</strong></p><p><strong>先关执行（关闭防火墙）</strong></p><p><code>systemctl stop firewalld</code></p><p><strong>在执行</strong></p><p><code>bash &lt;(curl -L -s https://install.direct/go.sh)</code></p><p><code>或者 bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></p><p><strong>官方v2ray搭建脚本，直接回车搭建，很简单。</strong></p><p><strong>执行不了脚本没有curl的话直接安装</strong></p><p><code>yum update -y &amp;&amp; yum install curl -y</code></p><p><strong>搭建完后直接编辑文件修改配置即可。</strong></p><p>路径:<code>/etc/v2ray/config.json</code></p><p><strong>更改好配置后，执行命令重启即可</strong></p><p>重启：<code>systemctl restart v2ray</code></p><p>启动：<code>systemctl start v2ray</code></p><p>停止：<code>systemctl stop v2ray</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShadowsocksR一键安装脚本（四合一）</title>
      <link href="/2020/02/01/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/02/01/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>ShadowsocksR 一键安装脚本（四合一）</strong></p><p><code>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/AppSo/shadowsocks_install/master/shadowsocks-all.sh</code></p><p><code>chmod +x shadowsocks-all.sh</code></p><p><code>./shadowsocks-all.sh2&gt;&amp;1 | tee shadowsocks-all.log</code></p><p><strong>ShadowsocksR 一键安装脚本</strong></p><p><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</code></p><p><code>chmod +x shadowsocksR.sh</code></p><p><code>./shadowsocksR.sh2&gt;&amp;1 | tee shadowsocksR.log</code></p><p><strong>ShadowsocksR 修改密码、配置多端口教程</strong></p><p>(1）输入<code>vi /etc/shadowsocks.json</code></p><p>(2）按“i”进入编辑模式，编辑如下</p><p><code>{</code></p><p><code>“server“: “0.0.0.0“,</code></p><p><code>“server_ipv6“: “::“,</code></p><p><code>“local_address“: “127.0.0.1“,</code></p><p><code>“local_port“: 1081,</code></p><p><code>“port_password“:{</code></p><p><code>“端口1“:“密码1“,</code></p><p><code>“端口2“:“密码2“,</code></p><p><code>“端口3“:“密码3“,</code></p><p><code>“端口4“:“密码4“</code></p><p><code>},</code></p><p><code>“timeout“: 120,</code></p><p><code>“udp_timeout“: 60,</code></p><p><code>“method“: “chacha20“,</code></p><p><code>“protocol“: “auth_sha1_compatible“,</code></p><p><code>“protocol_param“: ““,</code></p><p><code>“obfs“: “http_simple_compatible“,</code></p><p><code>“obfs_param“: ““,</code></p><p><code>“dns_ipv6“: false,</code></p><p><code>“connect_verbose_info“: 0,</code></p><p><code>“redirect“: ““,</code></p><p><code>“fast_open“: false,</code></p><p><code>“workers“: 1</code></p><p><code>}</code></p><p>(3）按esc返回，输入:wq回车保存</p><p>(4）输入/etc/init.d/shadowsocks restart重启ssr</p><p><strong>ShadowsocksR 其他命令</strong></p><p>启动：<code>/etc/init.d/shadowsocks start</code></p><p>停止：<code>/etc/init.d/shadowsocks stop</code></p><p>重启：<code>/etc/init.d/shadowsocks restart</code></p><p>状态：<code>/etc/init.d/shadowsocks status</code></p><p>卸载（仅限秋水大大脚本）：<code>./shadowsocksR.sh uninstall</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
